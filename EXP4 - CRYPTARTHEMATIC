from itertools import permutations

def is_valid_solution(puzzle, letter_to_digit):
    # Create a translation table for the current permutation
    translation = str.maketrans(''.join(letter_to_digit.keys()), ''.join(map(str, letter_to_digit.values())))
    # Translate the puzzle and evaluate the arithmetic condition
    try:
        left, right = puzzle.split('=')
        return eval(left.translate(translation)) == eval(right.translate(translation))
    except:
        return False

def solve_cryptarithmetic(puzzle):
    # Remove non-alphabet characters to find unique letters
    letters = ''.join(set(filter(str.isalpha, puzzle)))

    if len(letters) > 10:
        return "No solution possible with given puzzle as there are more than 10 unique letters."

    # Try all possible digit permutations for the unique letters
    for perm in permutations(range(10), len(letters)):
        letter_to_digit = dict(zip(letters, perm))
        if is_valid_solution(puzzle, letter_to_digit):
            return letter_to_digit

    return "No solution found."

def main():
    puzzle = "SEND + MORE = MONEY"
    solution = solve_cryptarithmetic(puzzle)

    if isinstance(solution, dict):
        print("Solution found:")
        for letter, digit in solution.items():
            print(f"{letter} -> {digit}")
    else:
        print(solution)

if __name__ == "__main__":
    main()
